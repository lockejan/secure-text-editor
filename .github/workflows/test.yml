name: Build, test and report

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  crypto-engine-tests:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Run CryptoEngine tests with coverage
        run: |
          dotnet test tests/CryptoEngine.Tests/CryptoEngine.Tests.csproj --configuration Release --logger trx --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Publish Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: false # just informative for now
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 30"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Upload Test Result Files
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/**/*
          retention-days: 7

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.20.0
        if: always()
        with:
          files: "${{ github.workspace }}/**/*.trx"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/**/coverage.cobertura.xml
          flags: crypto
          name: crypto-tests
          fail_ci_if_error: false

  # desktop-app-tests:
  #   runs-on: ubuntu-24.04
  #   continue-on-error: true
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 8.x
  #
  #     - name: Run DesktopApp tests with coverage
  #       run: |
  #         dotnet test tests/DesktopApp.Tests/DesktopApp.Tests.csproj --collect:"XPlat Code Coverage" --results-directory ./TestResults --verbosity normal
  #
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v5
  #       with:
          # token: ${{ secrets.CODECOV_TOKEN }}
  #         files: ./TestResults/**/coverage.cobertura.xml
  #         flags: desktop
  #         name: desktop-tests
  #         fail_ci_if_error: false # since deps are missing, this will fail
  #
  #     - name: Upload coverage artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: desktop-coverage
  #         path: ./TestResults/**/coverage.cobertura.xml
