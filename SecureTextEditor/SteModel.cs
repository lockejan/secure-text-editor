using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Security;

namespace SecureTextEditor
{
    /// <summary>
    /// Model for STE which contains all necessary parameters and attributes to be stored on disk or in memory
    /// </summary>
    public class SteModel
    {
        [JsonProperty(Required = Required.Always)]
        private string FormatVersion { get; } = "0.1";
        
        [JsonProperty(Required = Required.Always)]
        private string Encoding { get; }
        
        [JsonProperty(Required = Required.Always)]
        private Dictionary<string,Dictionary<string, string>> EncryptionOptions { get; }
        
        [JsonProperty(Required = Required.Default)]
        private string IvOrSalt { get; }

        [JsonProperty(Required = Required.Default)]
        private string SignaturePublicKey { get; }

        [JsonProperty(Required = Required.Default)]
        private string Signature { get; }

        [JsonProperty(Required = Required.Always)]
        private string Cipher { get; }

        /// <summary>
        /// Preparing and filling JSON-Structure
        /// </summary>
        /// <param name="encoding">used encoding for the text</param>
        /// <param name="encryptionOptions">list of all used options during encryption</param>
        /// <param name="ivOrSalt">related iv or salt</param>
        /// <param name="signaturePublicKey">related public key</param>
        /// <param name="signature">signature which has been generated by signing the text</param>
        /// <param name="cipher"></param>
        public SteModel(string encoding,
            Dictionary<string,Dictionary<string, string>> encryptionOptions,
            string ivOrSalt, string signaturePublicKey,
            string signature, string cipher)
        {
            Encoding = encoding;
            EncryptionOptions = encryptionOptions;
            IvOrSalt = ivOrSalt;
            SignaturePublicKey = signaturePublicKey;
            Signature = signature;
            Cipher = cipher;
        }
        
    }
    
}