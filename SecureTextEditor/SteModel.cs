using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Security;

namespace SecureTextEditor
{
    /// <summary>
    /// Model for STE which contains all necessary parameters and attributes to be stored on disk or in memory
    /// </summary>
    public class SteModel
    {
        [JsonProperty(Required = Required.Always)]
        private string _formatVersion = "0.1";
        
        [JsonProperty(Required = Required.Always)]
        private string _encoding;
        
//        [JsonProperty(Required = Required.Always)]
//        private EncryptionOptions _encryptionOptions;
        
        [JsonProperty(Required = Required.Default)]
        private string _ivOrSalt;

        [JsonProperty(Required = Required.Default)]
        private string _signaturePublicKey;

        [JsonProperty(Required = Required.Default)]
        private string _signature;

        [JsonProperty(Required = Required.Always)]
        private string _cipher;

        /// <summary>
        /// Preparing and filling JSON-Structure
        /// </summary>
        /// <param name="encoding">used encoding for the text</param>
        /// <param name="encryptionOptions">list of all used options during encryption</param>
        /// <param name="ivOrSalt">related iv or salt</param>
        /// <param name="signaturePublicKey">related public key</param>
        /// <param name="signature">signature which has been generated by signing the text</param>
        /// <param name="cipher"></param>
        public SteModel(string encoding,
//            EncryptionOptions encryptionOptions,
            string ivOrSalt, string signaturePublicKey,
            string signature, string cipher)
        {
            _encoding = encoding;
//            _encryptionOptions = encryptionOptions;
            _ivOrSalt = ivOrSalt;
            _signaturePublicKey = signaturePublicKey;
            _signature = signature;
            _cipher = cipher;
        }

//
//        public String LoadTextfile(String path)
//        {
//            Console.WriteLine("Please enter the file you wanna open:\n");
//
//            path = Console.ReadLine();
//            Console.WriteLine(path);
//            if (File.Exists(path))
//            {
//                return File.ReadAllText(path,Encoding.UTF8);
////                var cryptoData = File.ReadAllText("dummy.crypto", Encoding.UTF8);
////                _cryptoFabric = JsonConvert.DeserializeObject<SteModel>(cryptoData);
////                Console.WriteLine(_cryptoFabric);
//                
////                _path = AssemblyDirectory + "/../../../" + path;
//            }
//
//            return "File not found!";
//        }
//        
//        public void SaveTextfile()
//        {
//            Console.WriteLine("The current directory is {}");
//            Console.WriteLine("Please enter the file you wanna open:\n");
//
//            var txt = Console.ReadLine();
//            Console.WriteLine(txt);
////            var tmp = _cryptoFabric.EncryptTextToBytes(Text, _cryptoFabric.KEY);
//
////            Console.WriteLine(JsonConvert.SerializeObject(_cryptoFabric));
////            File.WriteAllText("./dummy.crypto",JsonConvert.SerializeObject(_cryptoFabric), Encoding.UTF8);
////            
////            File.WriteAllText(_path, Convert.ToBase64String(tmp), Encoding.UTF8);
////            FocusManager.Default.SetFocus(_textBox);
//        }
//        
//        private String AssemblyDirectory
//        {
//            get
//            {
//                string codeBase = Assembly.GetExecutingAssembly().CodeBase;
//                UriBuilder uri = new UriBuilder(codeBase);
//                string path = Uri.UnescapeDataString(uri.Path);
//                return Path.GetDirectoryName(path);
//            }
//        }
//        
    }
    
}